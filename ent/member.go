// Code generated by entc, DO NOT EDIT.

package ent

import (
	"enttest/ent/member"
	"enttest/ent/schema/constants"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Member is the model entity for the Member schema.
type Member struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// UID holds the value of the "uid" field.
	UID uint `json:"uid,omitempty"`
	// RegisterAt holds the value of the "register_at" field.
	RegisterAt uint `json:"register_at,omitempty"`
	// RegisterIP holds the value of the "register_ip" field.
	RegisterIP string `json:"register_ip,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender constants.Gender `json:"gender,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// AreaCode holds the value of the "area_code" field.
	AreaCode uint8 `json:"area_code,omitempty"`
	// Mobile holds the value of the "mobile" field.
	Mobile uint64 `json:"mobile,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Member) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case member.FieldGender:
			values[i] = new(constants.Gender)
		case member.FieldID, member.FieldCreatedAt, member.FieldUpdatedAt, member.FieldUID, member.FieldRegisterAt, member.FieldAreaCode, member.FieldMobile:
			values[i] = new(sql.NullInt64)
		case member.FieldRegisterIP, member.FieldAvatar, member.FieldDescription, member.FieldNickname, member.FieldEmail:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Member", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Member fields.
func (m *Member) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case member.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = uint64(value.Int64)
		case member.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Int64
			}
		case member.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Int64
			}
		case member.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				m.UID = uint(value.Int64)
			}
		case member.FieldRegisterAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field register_at", values[i])
			} else if value.Valid {
				m.RegisterAt = uint(value.Int64)
			}
		case member.FieldRegisterIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field register_ip", values[i])
			} else if value.Valid {
				m.RegisterIP = value.String
			}
		case member.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				m.Avatar = value.String
			}
		case member.FieldGender:
			if value, ok := values[i].(*constants.Gender); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value != nil {
				m.Gender = *value
			}
		case member.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		case member.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				m.Nickname = value.String
			}
		case member.FieldAreaCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field area_code", values[i])
			} else if value.Valid {
				m.AreaCode = uint8(value.Int64)
			}
		case member.FieldMobile:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				m.Mobile = uint64(value.Int64)
			}
		case member.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				m.Email = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Member.
// Note that you need to call Member.Unwrap() before calling this method if this Member
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Member) Update() *MemberUpdateOne {
	return (&MemberClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Member entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Member) Unwrap() *Member {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Member is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Member) String() string {
	var builder strings.Builder
	builder.WriteString("Member(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", m.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", m.UpdatedAt))
	builder.WriteString(", uid=")
	builder.WriteString(fmt.Sprintf("%v", m.UID))
	builder.WriteString(", register_at=")
	builder.WriteString(fmt.Sprintf("%v", m.RegisterAt))
	builder.WriteString(", register_ip=")
	builder.WriteString(m.RegisterIP)
	builder.WriteString(", avatar=")
	builder.WriteString(m.Avatar)
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", m.Gender))
	builder.WriteString(", description=")
	builder.WriteString(m.Description)
	builder.WriteString(", nickname=")
	builder.WriteString(m.Nickname)
	builder.WriteString(", area_code=")
	builder.WriteString(fmt.Sprintf("%v", m.AreaCode))
	builder.WriteString(", mobile=")
	builder.WriteString(fmt.Sprintf("%v", m.Mobile))
	builder.WriteString(", email=")
	builder.WriteString(m.Email)
	builder.WriteByte(')')
	return builder.String()
}

// Members is a parsable slice of Member.
type Members []*Member

func (m Members) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
