// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/oauthuserinfo"
	"enttest/ent/schema/constants"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OAuthUserinfoCreate is the builder for creating a OAuthUserinfo entity.
type OAuthUserinfoCreate struct {
	config
	mutation *OAuthUserinfoMutation
	hooks    []Hook
}

// SetAccount sets the "account" field.
func (ouc *OAuthUserinfoCreate) SetAccount(s string) *OAuthUserinfoCreate {
	ouc.mutation.SetAccount(s)
	return ouc
}

// SetNickname sets the "nickname" field.
func (ouc *OAuthUserinfoCreate) SetNickname(s string) *OAuthUserinfoCreate {
	ouc.mutation.SetNickname(s)
	return ouc
}

// SetAvatar sets the "avatar" field.
func (ouc *OAuthUserinfoCreate) SetAvatar(s string) *OAuthUserinfoCreate {
	ouc.mutation.SetAvatar(s)
	return ouc
}

// SetGender sets the "gender" field.
func (ouc *OAuthUserinfoCreate) SetGender(c constants.Gender) *OAuthUserinfoCreate {
	ouc.mutation.SetGender(c)
	return ouc
}

// Mutation returns the OAuthUserinfoMutation object of the builder.
func (ouc *OAuthUserinfoCreate) Mutation() *OAuthUserinfoMutation {
	return ouc.mutation
}

// Save creates the OAuthUserinfo in the database.
func (ouc *OAuthUserinfoCreate) Save(ctx context.Context) (*OAuthUserinfo, error) {
	var (
		err  error
		node *OAuthUserinfo
	)
	if len(ouc.hooks) == 0 {
		if err = ouc.check(); err != nil {
			return nil, err
		}
		node, err = ouc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OAuthUserinfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouc.check(); err != nil {
				return nil, err
			}
			ouc.mutation = mutation
			if node, err = ouc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ouc.hooks) - 1; i >= 0; i-- {
			if ouc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ouc *OAuthUserinfoCreate) SaveX(ctx context.Context) *OAuthUserinfo {
	v, err := ouc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ouc *OAuthUserinfoCreate) Exec(ctx context.Context) error {
	_, err := ouc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouc *OAuthUserinfoCreate) ExecX(ctx context.Context) {
	if err := ouc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouc *OAuthUserinfoCreate) check() error {
	if _, ok := ouc.mutation.Account(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required field "account"`)}
	}
	if _, ok := ouc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "nickname"`)}
	}
	if _, ok := ouc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "avatar"`)}
	}
	if _, ok := ouc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "gender"`)}
	}
	return nil
}

func (ouc *OAuthUserinfoCreate) sqlSave(ctx context.Context) (*OAuthUserinfo, error) {
	_node, _spec := ouc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ouc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ouc *OAuthUserinfoCreate) createSpec() (*OAuthUserinfo, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthUserinfo{config: ouc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: oauthuserinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauthuserinfo.FieldID,
			},
		}
	)
	if value, ok := ouc.mutation.Account(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldAccount,
		})
		_node.Account = value
	}
	if value, ok := ouc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := ouc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := ouc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldGender,
		})
		_node.Gender = value
	}
	return _node, _spec
}

// OAuthUserinfoCreateBulk is the builder for creating many OAuthUserinfo entities in bulk.
type OAuthUserinfoCreateBulk struct {
	config
	builders []*OAuthUserinfoCreate
}

// Save creates the OAuthUserinfo entities in the database.
func (oucb *OAuthUserinfoCreateBulk) Save(ctx context.Context) ([]*OAuthUserinfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oucb.builders))
	nodes := make([]*OAuthUserinfo, len(oucb.builders))
	mutators := make([]Mutator, len(oucb.builders))
	for i := range oucb.builders {
		func(i int, root context.Context) {
			builder := oucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthUserinfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oucb *OAuthUserinfoCreateBulk) SaveX(ctx context.Context) []*OAuthUserinfo {
	v, err := oucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oucb *OAuthUserinfoCreateBulk) Exec(ctx context.Context) error {
	_, err := oucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oucb *OAuthUserinfoCreateBulk) ExecX(ctx context.Context) {
	if err := oucb.Exec(ctx); err != nil {
		panic(err)
	}
}
