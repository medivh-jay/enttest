// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/member"
	"enttest/ent/oauth"
	"enttest/ent/oauthuserinfo"
	"enttest/ent/predicate"
	"enttest/ent/schema"
	"enttest/ent/schema/constants"
	"fmt"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMember        = "Member"
	TypeOAuth         = "OAuth"
	TypeOAuthUserinfo = "OAuthUserinfo"
)

// MemberMutation represents an operation that mutates the Member nodes in the graph.
type MemberMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	created_at     *int64
	addcreated_at  *int64
	updated_at     *int64
	addupdated_at  *int64
	uid            *uint
	adduid         *uint
	register_at    *uint
	addregister_at *uint
	register_ip    *string
	avatar         *string
	gender         *constants.Gender
	description    *string
	nickname       *string
	area_code      *uint8
	addarea_code   *uint8
	mobile         *uint64
	addmobile      *uint64
	email          *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Member, error)
	predicates     []predicate.Member
}

var _ ent.Mutation = (*MemberMutation)(nil)

// memberOption allows management of the mutation configuration using functional options.
type memberOption func(*MemberMutation)

// newMemberMutation creates new mutation for the Member entity.
func newMemberMutation(c config, op Op, opts ...memberOption) *MemberMutation {
	m := &MemberMutation{
		config:        c,
		op:            op,
		typ:           TypeMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemberID sets the ID field of the mutation.
func withMemberID(id uint64) memberOption {
	return func(m *MemberMutation) {
		var (
			err   error
			once  sync.Once
			value *Member
		)
		m.oldValue = func(ctx context.Context) (*Member, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Member.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMember sets the old Member of the mutation.
func withMember(node *Member) memberOption {
	return func(m *MemberMutation) {
		m.oldValue = func(context.Context) (*Member, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Member entities.
func (m *MemberMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemberMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *MemberMutation) SetCreatedAt(i int64) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MemberMutation) CreatedAt() (r int64, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *MemberMutation) AddCreatedAt(i int64) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *MemberMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MemberMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MemberMutation) SetUpdatedAt(i int64) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MemberMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *MemberMutation) AddUpdatedAt(i int64) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *MemberMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MemberMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetUID sets the "uid" field.
func (m *MemberMutation) SetUID(u uint) {
	m.uid = &u
	m.adduid = nil
}

// UID returns the value of the "uid" field in the mutation.
func (m *MemberMutation) UID() (r uint, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldUID(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// AddUID adds u to the "uid" field.
func (m *MemberMutation) AddUID(u uint) {
	if m.adduid != nil {
		*m.adduid += u
	} else {
		m.adduid = &u
	}
}

// AddedUID returns the value that was added to the "uid" field in this mutation.
func (m *MemberMutation) AddedUID() (r uint, exists bool) {
	v := m.adduid
	if v == nil {
		return
	}
	return *v, true
}

// ResetUID resets all changes to the "uid" field.
func (m *MemberMutation) ResetUID() {
	m.uid = nil
	m.adduid = nil
}

// SetRegisterAt sets the "register_at" field.
func (m *MemberMutation) SetRegisterAt(u uint) {
	m.register_at = &u
	m.addregister_at = nil
}

// RegisterAt returns the value of the "register_at" field in the mutation.
func (m *MemberMutation) RegisterAt() (r uint, exists bool) {
	v := m.register_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRegisterAt returns the old "register_at" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldRegisterAt(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRegisterAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRegisterAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegisterAt: %w", err)
	}
	return oldValue.RegisterAt, nil
}

// AddRegisterAt adds u to the "register_at" field.
func (m *MemberMutation) AddRegisterAt(u uint) {
	if m.addregister_at != nil {
		*m.addregister_at += u
	} else {
		m.addregister_at = &u
	}
}

// AddedRegisterAt returns the value that was added to the "register_at" field in this mutation.
func (m *MemberMutation) AddedRegisterAt() (r uint, exists bool) {
	v := m.addregister_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetRegisterAt resets all changes to the "register_at" field.
func (m *MemberMutation) ResetRegisterAt() {
	m.register_at = nil
	m.addregister_at = nil
}

// SetRegisterIP sets the "register_ip" field.
func (m *MemberMutation) SetRegisterIP(s string) {
	m.register_ip = &s
}

// RegisterIP returns the value of the "register_ip" field in the mutation.
func (m *MemberMutation) RegisterIP() (r string, exists bool) {
	v := m.register_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldRegisterIP returns the old "register_ip" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldRegisterIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRegisterIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRegisterIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegisterIP: %w", err)
	}
	return oldValue.RegisterIP, nil
}

// ResetRegisterIP resets all changes to the "register_ip" field.
func (m *MemberMutation) ResetRegisterIP() {
	m.register_ip = nil
}

// SetAvatar sets the "avatar" field.
func (m *MemberMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *MemberMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *MemberMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[member.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *MemberMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[member.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *MemberMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, member.FieldAvatar)
}

// SetGender sets the "gender" field.
func (m *MemberMutation) SetGender(c constants.Gender) {
	m.gender = &c
}

// Gender returns the value of the "gender" field in the mutation.
func (m *MemberMutation) Gender() (r constants.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldGender(ctx context.Context) (v constants.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *MemberMutation) ResetGender() {
	m.gender = nil
}

// SetDescription sets the "description" field.
func (m *MemberMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MemberMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *MemberMutation) ResetDescription() {
	m.description = nil
}

// SetNickname sets the "nickname" field.
func (m *MemberMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *MemberMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *MemberMutation) ResetNickname() {
	m.nickname = nil
}

// SetAreaCode sets the "area_code" field.
func (m *MemberMutation) SetAreaCode(u uint8) {
	m.area_code = &u
	m.addarea_code = nil
}

// AreaCode returns the value of the "area_code" field in the mutation.
func (m *MemberMutation) AreaCode() (r uint8, exists bool) {
	v := m.area_code
	if v == nil {
		return
	}
	return *v, true
}

// OldAreaCode returns the old "area_code" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldAreaCode(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAreaCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAreaCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAreaCode: %w", err)
	}
	return oldValue.AreaCode, nil
}

// AddAreaCode adds u to the "area_code" field.
func (m *MemberMutation) AddAreaCode(u uint8) {
	if m.addarea_code != nil {
		*m.addarea_code += u
	} else {
		m.addarea_code = &u
	}
}

// AddedAreaCode returns the value that was added to the "area_code" field in this mutation.
func (m *MemberMutation) AddedAreaCode() (r uint8, exists bool) {
	v := m.addarea_code
	if v == nil {
		return
	}
	return *v, true
}

// ClearAreaCode clears the value of the "area_code" field.
func (m *MemberMutation) ClearAreaCode() {
	m.area_code = nil
	m.addarea_code = nil
	m.clearedFields[member.FieldAreaCode] = struct{}{}
}

// AreaCodeCleared returns if the "area_code" field was cleared in this mutation.
func (m *MemberMutation) AreaCodeCleared() bool {
	_, ok := m.clearedFields[member.FieldAreaCode]
	return ok
}

// ResetAreaCode resets all changes to the "area_code" field.
func (m *MemberMutation) ResetAreaCode() {
	m.area_code = nil
	m.addarea_code = nil
	delete(m.clearedFields, member.FieldAreaCode)
}

// SetMobile sets the "mobile" field.
func (m *MemberMutation) SetMobile(u uint64) {
	m.mobile = &u
	m.addmobile = nil
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *MemberMutation) Mobile() (r uint64, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldMobile(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// AddMobile adds u to the "mobile" field.
func (m *MemberMutation) AddMobile(u uint64) {
	if m.addmobile != nil {
		*m.addmobile += u
	} else {
		m.addmobile = &u
	}
}

// AddedMobile returns the value that was added to the "mobile" field in this mutation.
func (m *MemberMutation) AddedMobile() (r uint64, exists bool) {
	v := m.addmobile
	if v == nil {
		return
	}
	return *v, true
}

// ClearMobile clears the value of the "mobile" field.
func (m *MemberMutation) ClearMobile() {
	m.mobile = nil
	m.addmobile = nil
	m.clearedFields[member.FieldMobile] = struct{}{}
}

// MobileCleared returns if the "mobile" field was cleared in this mutation.
func (m *MemberMutation) MobileCleared() bool {
	_, ok := m.clearedFields[member.FieldMobile]
	return ok
}

// ResetMobile resets all changes to the "mobile" field.
func (m *MemberMutation) ResetMobile() {
	m.mobile = nil
	m.addmobile = nil
	delete(m.clearedFields, member.FieldMobile)
}

// SetEmail sets the "email" field.
func (m *MemberMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *MemberMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *MemberMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[member.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *MemberMutation) EmailCleared() bool {
	_, ok := m.clearedFields[member.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *MemberMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, member.FieldEmail)
}

// Where appends a list predicates to the MemberMutation builder.
func (m *MemberMutation) Where(ps ...predicate.Member) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MemberMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Member).
func (m *MemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemberMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, member.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, member.FieldUpdatedAt)
	}
	if m.uid != nil {
		fields = append(fields, member.FieldUID)
	}
	if m.register_at != nil {
		fields = append(fields, member.FieldRegisterAt)
	}
	if m.register_ip != nil {
		fields = append(fields, member.FieldRegisterIP)
	}
	if m.avatar != nil {
		fields = append(fields, member.FieldAvatar)
	}
	if m.gender != nil {
		fields = append(fields, member.FieldGender)
	}
	if m.description != nil {
		fields = append(fields, member.FieldDescription)
	}
	if m.nickname != nil {
		fields = append(fields, member.FieldNickname)
	}
	if m.area_code != nil {
		fields = append(fields, member.FieldAreaCode)
	}
	if m.mobile != nil {
		fields = append(fields, member.FieldMobile)
	}
	if m.email != nil {
		fields = append(fields, member.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case member.FieldCreatedAt:
		return m.CreatedAt()
	case member.FieldUpdatedAt:
		return m.UpdatedAt()
	case member.FieldUID:
		return m.UID()
	case member.FieldRegisterAt:
		return m.RegisterAt()
	case member.FieldRegisterIP:
		return m.RegisterIP()
	case member.FieldAvatar:
		return m.Avatar()
	case member.FieldGender:
		return m.Gender()
	case member.FieldDescription:
		return m.Description()
	case member.FieldNickname:
		return m.Nickname()
	case member.FieldAreaCode:
		return m.AreaCode()
	case member.FieldMobile:
		return m.Mobile()
	case member.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case member.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case member.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case member.FieldUID:
		return m.OldUID(ctx)
	case member.FieldRegisterAt:
		return m.OldRegisterAt(ctx)
	case member.FieldRegisterIP:
		return m.OldRegisterIP(ctx)
	case member.FieldAvatar:
		return m.OldAvatar(ctx)
	case member.FieldGender:
		return m.OldGender(ctx)
	case member.FieldDescription:
		return m.OldDescription(ctx)
	case member.FieldNickname:
		return m.OldNickname(ctx)
	case member.FieldAreaCode:
		return m.OldAreaCode(ctx)
	case member.FieldMobile:
		return m.OldMobile(ctx)
	case member.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown Member field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case member.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case member.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case member.FieldUID:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case member.FieldRegisterAt:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegisterAt(v)
		return nil
	case member.FieldRegisterIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegisterIP(v)
		return nil
	case member.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case member.FieldGender:
		v, ok := value.(constants.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case member.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case member.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case member.FieldAreaCode:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAreaCode(v)
		return nil
	case member.FieldMobile:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case member.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemberMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, member.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, member.FieldUpdatedAt)
	}
	if m.adduid != nil {
		fields = append(fields, member.FieldUID)
	}
	if m.addregister_at != nil {
		fields = append(fields, member.FieldRegisterAt)
	}
	if m.addarea_code != nil {
		fields = append(fields, member.FieldAreaCode)
	}
	if m.addmobile != nil {
		fields = append(fields, member.FieldMobile)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemberMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case member.FieldCreatedAt:
		return m.AddedCreatedAt()
	case member.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case member.FieldUID:
		return m.AddedUID()
	case member.FieldRegisterAt:
		return m.AddedRegisterAt()
	case member.FieldAreaCode:
		return m.AddedAreaCode()
	case member.FieldMobile:
		return m.AddedMobile()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	case member.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case member.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case member.FieldUID:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUID(v)
		return nil
	case member.FieldRegisterAt:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRegisterAt(v)
		return nil
	case member.FieldAreaCode:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAreaCode(v)
		return nil
	case member.FieldMobile:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMobile(v)
		return nil
	}
	return fmt.Errorf("unknown Member numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemberMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(member.FieldAvatar) {
		fields = append(fields, member.FieldAvatar)
	}
	if m.FieldCleared(member.FieldAreaCode) {
		fields = append(fields, member.FieldAreaCode)
	}
	if m.FieldCleared(member.FieldMobile) {
		fields = append(fields, member.FieldMobile)
	}
	if m.FieldCleared(member.FieldEmail) {
		fields = append(fields, member.FieldEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemberMutation) ClearField(name string) error {
	switch name {
	case member.FieldAvatar:
		m.ClearAvatar()
		return nil
	case member.FieldAreaCode:
		m.ClearAreaCode()
		return nil
	case member.FieldMobile:
		m.ClearMobile()
		return nil
	case member.FieldEmail:
		m.ClearEmail()
		return nil
	}
	return fmt.Errorf("unknown Member nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemberMutation) ResetField(name string) error {
	switch name {
	case member.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case member.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case member.FieldUID:
		m.ResetUID()
		return nil
	case member.FieldRegisterAt:
		m.ResetRegisterAt()
		return nil
	case member.FieldRegisterIP:
		m.ResetRegisterIP()
		return nil
	case member.FieldAvatar:
		m.ResetAvatar()
		return nil
	case member.FieldGender:
		m.ResetGender()
		return nil
	case member.FieldDescription:
		m.ResetDescription()
		return nil
	case member.FieldNickname:
		m.ResetNickname()
		return nil
	case member.FieldAreaCode:
		m.ResetAreaCode()
		return nil
	case member.FieldMobile:
		m.ResetMobile()
		return nil
	case member.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemberMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemberMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemberMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemberMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Member unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemberMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Member edge %s", name)
}

// OAuthMutation represents an operation that mutates the OAuth nodes in the graph.
type OAuthMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	method        *string
	icon          *string
	appid         *string
	secret        *string
	resource_uri  *schema.ResourceURI
	scope         *[]string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OAuth, error)
	predicates    []predicate.OAuth
}

var _ ent.Mutation = (*OAuthMutation)(nil)

// oauthOption allows management of the mutation configuration using functional options.
type oauthOption func(*OAuthMutation)

// newOAuthMutation creates new mutation for the OAuth entity.
func newOAuthMutation(c config, op Op, opts ...oauthOption) *OAuthMutation {
	m := &OAuthMutation{
		config:        c,
		op:            op,
		typ:           TypeOAuth,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOAuthID sets the ID field of the mutation.
func withOAuthID(id int) oauthOption {
	return func(m *OAuthMutation) {
		var (
			err   error
			once  sync.Once
			value *OAuth
		)
		m.oldValue = func(ctx context.Context) (*OAuth, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OAuth.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOAuth sets the old OAuth of the mutation.
func withOAuth(node *OAuth) oauthOption {
	return func(m *OAuthMutation) {
		m.oldValue = func(context.Context) (*OAuth, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OAuthMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OAuthMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OAuthMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *OAuthMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OAuthMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the OAuth entity.
// If the OAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OAuthMutation) ResetName() {
	m.name = nil
}

// SetMethod sets the "method" field.
func (m *OAuthMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *OAuthMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the OAuth entity.
// If the OAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *OAuthMutation) ResetMethod() {
	m.method = nil
}

// SetIcon sets the "icon" field.
func (m *OAuthMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *OAuthMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the OAuth entity.
// If the OAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *OAuthMutation) ResetIcon() {
	m.icon = nil
}

// SetAppid sets the "appid" field.
func (m *OAuthMutation) SetAppid(s string) {
	m.appid = &s
}

// Appid returns the value of the "appid" field in the mutation.
func (m *OAuthMutation) Appid() (r string, exists bool) {
	v := m.appid
	if v == nil {
		return
	}
	return *v, true
}

// OldAppid returns the old "appid" field's value of the OAuth entity.
// If the OAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthMutation) OldAppid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppid: %w", err)
	}
	return oldValue.Appid, nil
}

// ResetAppid resets all changes to the "appid" field.
func (m *OAuthMutation) ResetAppid() {
	m.appid = nil
}

// SetSecret sets the "secret" field.
func (m *OAuthMutation) SetSecret(s string) {
	m.secret = &s
}

// Secret returns the value of the "secret" field in the mutation.
func (m *OAuthMutation) Secret() (r string, exists bool) {
	v := m.secret
	if v == nil {
		return
	}
	return *v, true
}

// OldSecret returns the old "secret" field's value of the OAuth entity.
// If the OAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthMutation) OldSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecret: %w", err)
	}
	return oldValue.Secret, nil
}

// ResetSecret resets all changes to the "secret" field.
func (m *OAuthMutation) ResetSecret() {
	m.secret = nil
}

// SetResourceURI sets the "resource_uri" field.
func (m *OAuthMutation) SetResourceURI(su schema.ResourceURI) {
	m.resource_uri = &su
}

// ResourceURI returns the value of the "resource_uri" field in the mutation.
func (m *OAuthMutation) ResourceURI() (r schema.ResourceURI, exists bool) {
	v := m.resource_uri
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceURI returns the old "resource_uri" field's value of the OAuth entity.
// If the OAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthMutation) OldResourceURI(ctx context.Context) (v schema.ResourceURI, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResourceURI is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResourceURI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceURI: %w", err)
	}
	return oldValue.ResourceURI, nil
}

// ResetResourceURI resets all changes to the "resource_uri" field.
func (m *OAuthMutation) ResetResourceURI() {
	m.resource_uri = nil
}

// SetScope sets the "scope" field.
func (m *OAuthMutation) SetScope(s []string) {
	m.scope = &s
}

// Scope returns the value of the "scope" field in the mutation.
func (m *OAuthMutation) Scope() (r []string, exists bool) {
	v := m.scope
	if v == nil {
		return
	}
	return *v, true
}

// OldScope returns the old "scope" field's value of the OAuth entity.
// If the OAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthMutation) OldScope(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScope: %w", err)
	}
	return oldValue.Scope, nil
}

// ResetScope resets all changes to the "scope" field.
func (m *OAuthMutation) ResetScope() {
	m.scope = nil
}

// Where appends a list predicates to the OAuthMutation builder.
func (m *OAuthMutation) Where(ps ...predicate.OAuth) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OAuthMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OAuth).
func (m *OAuthMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OAuthMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, oauth.FieldName)
	}
	if m.method != nil {
		fields = append(fields, oauth.FieldMethod)
	}
	if m.icon != nil {
		fields = append(fields, oauth.FieldIcon)
	}
	if m.appid != nil {
		fields = append(fields, oauth.FieldAppid)
	}
	if m.secret != nil {
		fields = append(fields, oauth.FieldSecret)
	}
	if m.resource_uri != nil {
		fields = append(fields, oauth.FieldResourceURI)
	}
	if m.scope != nil {
		fields = append(fields, oauth.FieldScope)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OAuthMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case oauth.FieldName:
		return m.Name()
	case oauth.FieldMethod:
		return m.Method()
	case oauth.FieldIcon:
		return m.Icon()
	case oauth.FieldAppid:
		return m.Appid()
	case oauth.FieldSecret:
		return m.Secret()
	case oauth.FieldResourceURI:
		return m.ResourceURI()
	case oauth.FieldScope:
		return m.Scope()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OAuthMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case oauth.FieldName:
		return m.OldName(ctx)
	case oauth.FieldMethod:
		return m.OldMethod(ctx)
	case oauth.FieldIcon:
		return m.OldIcon(ctx)
	case oauth.FieldAppid:
		return m.OldAppid(ctx)
	case oauth.FieldSecret:
		return m.OldSecret(ctx)
	case oauth.FieldResourceURI:
		return m.OldResourceURI(ctx)
	case oauth.FieldScope:
		return m.OldScope(ctx)
	}
	return nil, fmt.Errorf("unknown OAuth field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OAuthMutation) SetField(name string, value ent.Value) error {
	switch name {
	case oauth.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case oauth.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case oauth.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case oauth.FieldAppid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppid(v)
		return nil
	case oauth.FieldSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecret(v)
		return nil
	case oauth.FieldResourceURI:
		v, ok := value.(schema.ResourceURI)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceURI(v)
		return nil
	case oauth.FieldScope:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScope(v)
		return nil
	}
	return fmt.Errorf("unknown OAuth field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OAuthMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OAuthMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OAuthMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OAuth numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OAuthMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OAuthMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OAuthMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OAuth nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OAuthMutation) ResetField(name string) error {
	switch name {
	case oauth.FieldName:
		m.ResetName()
		return nil
	case oauth.FieldMethod:
		m.ResetMethod()
		return nil
	case oauth.FieldIcon:
		m.ResetIcon()
		return nil
	case oauth.FieldAppid:
		m.ResetAppid()
		return nil
	case oauth.FieldSecret:
		m.ResetSecret()
		return nil
	case oauth.FieldResourceURI:
		m.ResetResourceURI()
		return nil
	case oauth.FieldScope:
		m.ResetScope()
		return nil
	}
	return fmt.Errorf("unknown OAuth field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OAuthMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OAuthMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OAuthMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OAuthMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OAuthMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OAuthMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OAuthMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OAuth unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OAuthMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OAuth edge %s", name)
}

// OAuthUserinfoMutation represents an operation that mutates the OAuthUserinfo nodes in the graph.
type OAuthUserinfoMutation struct {
	config
	op            Op
	typ           string
	id            *int
	account       *string
	nickname      *string
	avatar        *string
	gender        *constants.Gender
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OAuthUserinfo, error)
	predicates    []predicate.OAuthUserinfo
}

var _ ent.Mutation = (*OAuthUserinfoMutation)(nil)

// oauthuserinfoOption allows management of the mutation configuration using functional options.
type oauthuserinfoOption func(*OAuthUserinfoMutation)

// newOAuthUserinfoMutation creates new mutation for the OAuthUserinfo entity.
func newOAuthUserinfoMutation(c config, op Op, opts ...oauthuserinfoOption) *OAuthUserinfoMutation {
	m := &OAuthUserinfoMutation{
		config:        c,
		op:            op,
		typ:           TypeOAuthUserinfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOAuthUserinfoID sets the ID field of the mutation.
func withOAuthUserinfoID(id int) oauthuserinfoOption {
	return func(m *OAuthUserinfoMutation) {
		var (
			err   error
			once  sync.Once
			value *OAuthUserinfo
		)
		m.oldValue = func(ctx context.Context) (*OAuthUserinfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OAuthUserinfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOAuthUserinfo sets the old OAuthUserinfo of the mutation.
func withOAuthUserinfo(node *OAuthUserinfo) oauthuserinfoOption {
	return func(m *OAuthUserinfoMutation) {
		m.oldValue = func(context.Context) (*OAuthUserinfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OAuthUserinfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OAuthUserinfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OAuthUserinfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAccount sets the "account" field.
func (m *OAuthUserinfoMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *OAuthUserinfoMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the OAuthUserinfo entity.
// If the OAuthUserinfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserinfoMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ResetAccount resets all changes to the "account" field.
func (m *OAuthUserinfoMutation) ResetAccount() {
	m.account = nil
}

// SetNickname sets the "nickname" field.
func (m *OAuthUserinfoMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *OAuthUserinfoMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the OAuthUserinfo entity.
// If the OAuthUserinfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserinfoMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *OAuthUserinfoMutation) ResetNickname() {
	m.nickname = nil
}

// SetAvatar sets the "avatar" field.
func (m *OAuthUserinfoMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *OAuthUserinfoMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the OAuthUserinfo entity.
// If the OAuthUserinfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserinfoMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *OAuthUserinfoMutation) ResetAvatar() {
	m.avatar = nil
}

// SetGender sets the "gender" field.
func (m *OAuthUserinfoMutation) SetGender(c constants.Gender) {
	m.gender = &c
}

// Gender returns the value of the "gender" field in the mutation.
func (m *OAuthUserinfoMutation) Gender() (r constants.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the OAuthUserinfo entity.
// If the OAuthUserinfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserinfoMutation) OldGender(ctx context.Context) (v constants.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *OAuthUserinfoMutation) ResetGender() {
	m.gender = nil
}

// Where appends a list predicates to the OAuthUserinfoMutation builder.
func (m *OAuthUserinfoMutation) Where(ps ...predicate.OAuthUserinfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OAuthUserinfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OAuthUserinfo).
func (m *OAuthUserinfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OAuthUserinfoMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.account != nil {
		fields = append(fields, oauthuserinfo.FieldAccount)
	}
	if m.nickname != nil {
		fields = append(fields, oauthuserinfo.FieldNickname)
	}
	if m.avatar != nil {
		fields = append(fields, oauthuserinfo.FieldAvatar)
	}
	if m.gender != nil {
		fields = append(fields, oauthuserinfo.FieldGender)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OAuthUserinfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case oauthuserinfo.FieldAccount:
		return m.Account()
	case oauthuserinfo.FieldNickname:
		return m.Nickname()
	case oauthuserinfo.FieldAvatar:
		return m.Avatar()
	case oauthuserinfo.FieldGender:
		return m.Gender()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OAuthUserinfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case oauthuserinfo.FieldAccount:
		return m.OldAccount(ctx)
	case oauthuserinfo.FieldNickname:
		return m.OldNickname(ctx)
	case oauthuserinfo.FieldAvatar:
		return m.OldAvatar(ctx)
	case oauthuserinfo.FieldGender:
		return m.OldGender(ctx)
	}
	return nil, fmt.Errorf("unknown OAuthUserinfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OAuthUserinfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case oauthuserinfo.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	case oauthuserinfo.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case oauthuserinfo.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case oauthuserinfo.FieldGender:
		v, ok := value.(constants.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	}
	return fmt.Errorf("unknown OAuthUserinfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OAuthUserinfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OAuthUserinfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OAuthUserinfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OAuthUserinfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OAuthUserinfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OAuthUserinfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OAuthUserinfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OAuthUserinfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OAuthUserinfoMutation) ResetField(name string) error {
	switch name {
	case oauthuserinfo.FieldAccount:
		m.ResetAccount()
		return nil
	case oauthuserinfo.FieldNickname:
		m.ResetNickname()
		return nil
	case oauthuserinfo.FieldAvatar:
		m.ResetAvatar()
		return nil
	case oauthuserinfo.FieldGender:
		m.ResetGender()
		return nil
	}
	return fmt.Errorf("unknown OAuthUserinfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OAuthUserinfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OAuthUserinfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OAuthUserinfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OAuthUserinfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OAuthUserinfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OAuthUserinfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OAuthUserinfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OAuthUserinfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OAuthUserinfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OAuthUserinfo edge %s", name)
}
