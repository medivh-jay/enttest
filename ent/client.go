// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"enttest/ent/migrate"

	"enttest/ent/member"
	"enttest/ent/oauth"
	"enttest/ent/oauthuserinfo"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Member is the client for interacting with the Member builders.
	Member *MemberClient
	// OAuth is the client for interacting with the OAuth builders.
	OAuth *OAuthClient
	// OAuthUserinfo is the client for interacting with the OAuthUserinfo builders.
	OAuthUserinfo *OAuthUserinfoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Member = NewMemberClient(c.config)
	c.OAuth = NewOAuthClient(c.config)
	c.OAuthUserinfo = NewOAuthUserinfoClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Member:        NewMemberClient(cfg),
		OAuth:         NewOAuthClient(cfg),
		OAuthUserinfo: NewOAuthUserinfoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:        cfg,
		Member:        NewMemberClient(cfg),
		OAuth:         NewOAuthClient(cfg),
		OAuthUserinfo: NewOAuthUserinfoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Member.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Member.Use(hooks...)
	c.OAuth.Use(hooks...)
	c.OAuthUserinfo.Use(hooks...)
}

// MemberClient is a client for the Member schema.
type MemberClient struct {
	config
}

// NewMemberClient returns a client for the Member from the given config.
func NewMemberClient(c config) *MemberClient {
	return &MemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `member.Hooks(f(g(h())))`.
func (c *MemberClient) Use(hooks ...Hook) {
	c.hooks.Member = append(c.hooks.Member, hooks...)
}

// Create returns a create builder for Member.
func (c *MemberClient) Create() *MemberCreate {
	mutation := newMemberMutation(c.config, OpCreate)
	return &MemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Member entities.
func (c *MemberClient) CreateBulk(builders ...*MemberCreate) *MemberCreateBulk {
	return &MemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Member.
func (c *MemberClient) Update() *MemberUpdate {
	mutation := newMemberMutation(c.config, OpUpdate)
	return &MemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberClient) UpdateOne(m *Member) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMember(m))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberClient) UpdateOneID(id uint64) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMemberID(id))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Member.
func (c *MemberClient) Delete() *MemberDelete {
	mutation := newMemberMutation(c.config, OpDelete)
	return &MemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MemberClient) DeleteOne(m *Member) *MemberDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MemberClient) DeleteOneID(id uint64) *MemberDeleteOne {
	builder := c.Delete().Where(member.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberDeleteOne{builder}
}

// Query returns a query builder for Member.
func (c *MemberClient) Query() *MemberQuery {
	return &MemberQuery{
		config: c.config,
	}
}

// Get returns a Member entity by its id.
func (c *MemberClient) Get(ctx context.Context, id uint64) (*Member, error) {
	return c.Query().Where(member.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberClient) GetX(ctx context.Context, id uint64) *Member {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MemberClient) Hooks() []Hook {
	return c.hooks.Member
}

// OAuthClient is a client for the OAuth schema.
type OAuthClient struct {
	config
}

// NewOAuthClient returns a client for the OAuth from the given config.
func NewOAuthClient(c config) *OAuthClient {
	return &OAuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauth.Hooks(f(g(h())))`.
func (c *OAuthClient) Use(hooks ...Hook) {
	c.hooks.OAuth = append(c.hooks.OAuth, hooks...)
}

// Create returns a create builder for OAuth.
func (c *OAuthClient) Create() *OAuthCreate {
	mutation := newOAuthMutation(c.config, OpCreate)
	return &OAuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuth entities.
func (c *OAuthClient) CreateBulk(builders ...*OAuthCreate) *OAuthCreateBulk {
	return &OAuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuth.
func (c *OAuthClient) Update() *OAuthUpdate {
	mutation := newOAuthMutation(c.config, OpUpdate)
	return &OAuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthClient) UpdateOne(o *OAuth) *OAuthUpdateOne {
	mutation := newOAuthMutation(c.config, OpUpdateOne, withOAuth(o))
	return &OAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthClient) UpdateOneID(id int) *OAuthUpdateOne {
	mutation := newOAuthMutation(c.config, OpUpdateOne, withOAuthID(id))
	return &OAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuth.
func (c *OAuthClient) Delete() *OAuthDelete {
	mutation := newOAuthMutation(c.config, OpDelete)
	return &OAuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OAuthClient) DeleteOne(o *OAuth) *OAuthDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OAuthClient) DeleteOneID(id int) *OAuthDeleteOne {
	builder := c.Delete().Where(oauth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthDeleteOne{builder}
}

// Query returns a query builder for OAuth.
func (c *OAuthClient) Query() *OAuthQuery {
	return &OAuthQuery{
		config: c.config,
	}
}

// Get returns a OAuth entity by its id.
func (c *OAuthClient) Get(ctx context.Context, id int) (*OAuth, error) {
	return c.Query().Where(oauth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthClient) GetX(ctx context.Context, id int) *OAuth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OAuthClient) Hooks() []Hook {
	return c.hooks.OAuth
}

// OAuthUserinfoClient is a client for the OAuthUserinfo schema.
type OAuthUserinfoClient struct {
	config
}

// NewOAuthUserinfoClient returns a client for the OAuthUserinfo from the given config.
func NewOAuthUserinfoClient(c config) *OAuthUserinfoClient {
	return &OAuthUserinfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthuserinfo.Hooks(f(g(h())))`.
func (c *OAuthUserinfoClient) Use(hooks ...Hook) {
	c.hooks.OAuthUserinfo = append(c.hooks.OAuthUserinfo, hooks...)
}

// Create returns a create builder for OAuthUserinfo.
func (c *OAuthUserinfoClient) Create() *OAuthUserinfoCreate {
	mutation := newOAuthUserinfoMutation(c.config, OpCreate)
	return &OAuthUserinfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthUserinfo entities.
func (c *OAuthUserinfoClient) CreateBulk(builders ...*OAuthUserinfoCreate) *OAuthUserinfoCreateBulk {
	return &OAuthUserinfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthUserinfo.
func (c *OAuthUserinfoClient) Update() *OAuthUserinfoUpdate {
	mutation := newOAuthUserinfoMutation(c.config, OpUpdate)
	return &OAuthUserinfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthUserinfoClient) UpdateOne(ou *OAuthUserinfo) *OAuthUserinfoUpdateOne {
	mutation := newOAuthUserinfoMutation(c.config, OpUpdateOne, withOAuthUserinfo(ou))
	return &OAuthUserinfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthUserinfoClient) UpdateOneID(id int) *OAuthUserinfoUpdateOne {
	mutation := newOAuthUserinfoMutation(c.config, OpUpdateOne, withOAuthUserinfoID(id))
	return &OAuthUserinfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthUserinfo.
func (c *OAuthUserinfoClient) Delete() *OAuthUserinfoDelete {
	mutation := newOAuthUserinfoMutation(c.config, OpDelete)
	return &OAuthUserinfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OAuthUserinfoClient) DeleteOne(ou *OAuthUserinfo) *OAuthUserinfoDeleteOne {
	return c.DeleteOneID(ou.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OAuthUserinfoClient) DeleteOneID(id int) *OAuthUserinfoDeleteOne {
	builder := c.Delete().Where(oauthuserinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthUserinfoDeleteOne{builder}
}

// Query returns a query builder for OAuthUserinfo.
func (c *OAuthUserinfoClient) Query() *OAuthUserinfoQuery {
	return &OAuthUserinfoQuery{
		config: c.config,
	}
}

// Get returns a OAuthUserinfo entity by its id.
func (c *OAuthUserinfoClient) Get(ctx context.Context, id int) (*OAuthUserinfo, error) {
	return c.Query().Where(oauthuserinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthUserinfoClient) GetX(ctx context.Context, id int) *OAuthUserinfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OAuthUserinfoClient) Hooks() []Hook {
	return c.hooks.OAuthUserinfo
}
