// Code generated by entc, DO NOT EDIT.

package member

import (
	"enttest/ent/schema/constants"
	"fmt"
)

const (
	// Label holds the string label denoting the member type in the database.
	Label = "member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// FieldRegisterAt holds the string denoting the register_at field in the database.
	FieldRegisterAt = "register_at"
	// FieldRegisterIP holds the string denoting the register_ip field in the database.
	FieldRegisterIP = "register_ip"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldAreaCode holds the string denoting the area_code field in the database.
	FieldAreaCode = "area_code"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// Table holds the table name of the member in the database.
	Table = "members"
)

// Columns holds all SQL columns for member fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUID,
	FieldRegisterAt,
	FieldRegisterIP,
	FieldAvatar,
	FieldGender,
	FieldDescription,
	FieldNickname,
	FieldAreaCode,
	FieldMobile,
	FieldEmail,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// DefaultRegisterAt holds the default value on creation for the "register_at" field.
	DefaultRegisterAt func() uint
	// RegisterIPValidator is a validator for the "register_ip" field. It is called by the builders before save.
	RegisterIPValidator func(string) error
	// AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	AvatarValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	NicknameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uint64
)

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge constants.Gender) error {
	switch ge.String() {
	case "0", "1", "2":
		return nil
	default:
		return fmt.Errorf("member: invalid enum value for gender field: %q", ge)
	}
}
