// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/oauthuserinfo"
	"enttest/ent/predicate"
	"enttest/ent/schema/constants"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OAuthUserinfoUpdate is the builder for updating OAuthUserinfo entities.
type OAuthUserinfoUpdate struct {
	config
	hooks    []Hook
	mutation *OAuthUserinfoMutation
}

// Where appends a list predicates to the OAuthUserinfoUpdate builder.
func (ouu *OAuthUserinfoUpdate) Where(ps ...predicate.OAuthUserinfo) *OAuthUserinfoUpdate {
	ouu.mutation.Where(ps...)
	return ouu
}

// SetAccount sets the "account" field.
func (ouu *OAuthUserinfoUpdate) SetAccount(s string) *OAuthUserinfoUpdate {
	ouu.mutation.SetAccount(s)
	return ouu
}

// SetNickname sets the "nickname" field.
func (ouu *OAuthUserinfoUpdate) SetNickname(s string) *OAuthUserinfoUpdate {
	ouu.mutation.SetNickname(s)
	return ouu
}

// SetAvatar sets the "avatar" field.
func (ouu *OAuthUserinfoUpdate) SetAvatar(s string) *OAuthUserinfoUpdate {
	ouu.mutation.SetAvatar(s)
	return ouu
}

// SetGender sets the "gender" field.
func (ouu *OAuthUserinfoUpdate) SetGender(c constants.Gender) *OAuthUserinfoUpdate {
	ouu.mutation.SetGender(c)
	return ouu
}

// Mutation returns the OAuthUserinfoMutation object of the builder.
func (ouu *OAuthUserinfoUpdate) Mutation() *OAuthUserinfoMutation {
	return ouu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ouu *OAuthUserinfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ouu.hooks) == 0 {
		affected, err = ouu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OAuthUserinfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouu.mutation = mutation
			affected, err = ouu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ouu.hooks) - 1; i >= 0; i-- {
			if ouu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouu *OAuthUserinfoUpdate) SaveX(ctx context.Context) int {
	affected, err := ouu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ouu *OAuthUserinfoUpdate) Exec(ctx context.Context) error {
	_, err := ouu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouu *OAuthUserinfoUpdate) ExecX(ctx context.Context) {
	if err := ouu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouu *OAuthUserinfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oauthuserinfo.Table,
			Columns: oauthuserinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauthuserinfo.FieldID,
			},
		},
	}
	if ps := ouu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouu.mutation.Account(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldAccount,
		})
	}
	if value, ok := ouu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldNickname,
		})
	}
	if value, ok := ouu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldAvatar,
		})
	}
	if value, ok := ouu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldGender,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ouu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthuserinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OAuthUserinfoUpdateOne is the builder for updating a single OAuthUserinfo entity.
type OAuthUserinfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuthUserinfoMutation
}

// SetAccount sets the "account" field.
func (ouuo *OAuthUserinfoUpdateOne) SetAccount(s string) *OAuthUserinfoUpdateOne {
	ouuo.mutation.SetAccount(s)
	return ouuo
}

// SetNickname sets the "nickname" field.
func (ouuo *OAuthUserinfoUpdateOne) SetNickname(s string) *OAuthUserinfoUpdateOne {
	ouuo.mutation.SetNickname(s)
	return ouuo
}

// SetAvatar sets the "avatar" field.
func (ouuo *OAuthUserinfoUpdateOne) SetAvatar(s string) *OAuthUserinfoUpdateOne {
	ouuo.mutation.SetAvatar(s)
	return ouuo
}

// SetGender sets the "gender" field.
func (ouuo *OAuthUserinfoUpdateOne) SetGender(c constants.Gender) *OAuthUserinfoUpdateOne {
	ouuo.mutation.SetGender(c)
	return ouuo
}

// Mutation returns the OAuthUserinfoMutation object of the builder.
func (ouuo *OAuthUserinfoUpdateOne) Mutation() *OAuthUserinfoMutation {
	return ouuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouuo *OAuthUserinfoUpdateOne) Select(field string, fields ...string) *OAuthUserinfoUpdateOne {
	ouuo.fields = append([]string{field}, fields...)
	return ouuo
}

// Save executes the query and returns the updated OAuthUserinfo entity.
func (ouuo *OAuthUserinfoUpdateOne) Save(ctx context.Context) (*OAuthUserinfo, error) {
	var (
		err  error
		node *OAuthUserinfo
	)
	if len(ouuo.hooks) == 0 {
		node, err = ouuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OAuthUserinfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouuo.mutation = mutation
			node, err = ouuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouuo.hooks) - 1; i >= 0; i-- {
			if ouuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouuo *OAuthUserinfoUpdateOne) SaveX(ctx context.Context) *OAuthUserinfo {
	node, err := ouuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouuo *OAuthUserinfoUpdateOne) Exec(ctx context.Context) error {
	_, err := ouuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouuo *OAuthUserinfoUpdateOne) ExecX(ctx context.Context) {
	if err := ouuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouuo *OAuthUserinfoUpdateOne) sqlSave(ctx context.Context) (_node *OAuthUserinfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oauthuserinfo.Table,
			Columns: oauthuserinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauthuserinfo.FieldID,
			},
		},
	}
	id, ok := ouuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OAuthUserinfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ouuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthuserinfo.FieldID)
		for _, f := range fields {
			if !oauthuserinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthuserinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouuo.mutation.Account(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldAccount,
		})
	}
	if value, ok := ouuo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldNickname,
		})
	}
	if value, ok := ouuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldAvatar,
		})
	}
	if value, ok := ouuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthuserinfo.FieldGender,
		})
	}
	_node = &OAuthUserinfo{config: ouuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthuserinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
